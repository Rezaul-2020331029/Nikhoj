<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
  <!-- Gradient definitions -->
  <defs>
    <linearGradient id="mainGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#ccc;stop-opacity:1"/>
      <stop offset="100%" style="stop-color:#888;stop-opacity:1"/>
    </linearGradient>
    <linearGradient id="accentGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#F59E0B;stop-opacity:1"/>
      <stop offset="100%" style="stop-color:#EF4444;stop-opacity:1"/>
    </linearGradient>
    <filter id="shadow" x="-50%" y="-50%" width="200%" height="200%">
      <feDropShadow dx="0" dy="4" stdDeviation="4" flood-opacity="0.15"/>
    </filter>
  </defs>
  
  <!-- Main circular background -->
  <!-- <circle cx="100" cy="100" r="85" fill="url(#mainGradient)" opacity="0.1"/> -->
  
  <!-- Search/magnifying glass element representing search functionality -->
  <g transform="translate(100, 100)">
    <!-- Main search circle -->
    <circle cx="-15" cy="-15" r="35" fill="none" stroke="url(#mainGradient)" stroke-width="2" stroke-linecap="round"/>
    
    <!-- Search handle -->
    <line x1="10" y1="10" x2="30" y2="30" stroke="url(#mainGradient)" stroke-width="2" stroke-linecap="round"/>
    
    <!-- Inner connection dots representing found items/people -->
    <circle cx="-25" cy="-20" r="4" fill="url(#accentGradient)">
      <animate attributeName="opacity" values="0.3;1;0.3" dur="2s" repeatCount="indefinite"/>
    </circle>
    <circle cx="-10" cy="-25" r="4" fill="url(#accentGradient)">
      <animate attributeName="opacity" values="0.3;1;0.3" dur="2s" begin="0.5s" repeatCount="indefinite"/>
    </circle>
    <circle cx="-15" cy="-8" r="4" fill="url(#accentGradient)">
      <animate attributeName="opacity" values="0.3;1;0.3" dur="2s" begin="1s" repeatCount="indefinite"/>
    </circle>
    
    <!-- Connecting lines showing the network/matching aspect -->
    <path d="M -25,-20 L -10,-25 L -15,-8" fill="none" stroke="url(#accentGradient)" stroke-width="1.5" opacity="0.4"/>
  </g>
  
  <!-- Subtle orbit rings suggesting global reach and connection -->
  <ellipse cx="100" cy="100" rx="70" ry="25" fill="none" stroke="url(#mainGradient)" stroke-width="1" opacity="0.2" transform="rotate(-20 100 100)"/>
  <ellipse cx="100" cy="100" rx="70" ry="25" fill="none" stroke="url(#mainGradient)" stroke-width="1" opacity="0.2" transform="rotate(20 100 100)"/>
<!-- Code injected by live-server -->
<script>
	// <![CDATA[  <-- For SVG support
	if ('WebSocket' in window) {
		(function () {
			function refreshCSS() {
				var sheets = [].slice.call(document.getElementsByTagName("link"));
				var head = document.getElementsByTagName("head")[0];
				for (var i = 0; i < sheets.length; ++i) {
					var elem = sheets[i];
					var parent = elem.parentElement || head;
					parent.removeChild(elem);
					var rel = elem.rel;
					if (elem.href && typeof rel != "string" || rel.length == 0 || rel.toLowerCase() == "stylesheet") {
						var url = elem.href.replace(/(&|\?)_cacheOverride=\d+/, '');
						elem.href = url + (url.indexOf('?') >= 0 ? '&' : '?') + '_cacheOverride=' + (new Date().valueOf());
					}
					parent.appendChild(elem);
				}
			}
			var protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';
			var address = protocol + window.location.host + window.location.pathname + '/ws';
			var socket = new WebSocket(address);
			socket.onmessage = function (msg) {
				if (msg.data == 'reload') window.location.reload();
				else if (msg.data == 'refreshcss') refreshCSS();
			};
			if (sessionStorage && !sessionStorage.getItem('IsThisFirstTime_Log_From_LiveServer')) {
				sessionStorage.setItem('IsThisFirstTime_Log_From_LiveServer', true);
			}
		})();
	}
	else {
		console.error('Upgrade your browser. This Browser is NOT supported WebSocket for Live-Reloading.');
	}
	// ]]>
</script>
</svg>